/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/socket.io-mock@1.3.2/dist/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
 "use strict";function createCommonjsModule(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return commonjsRequire(t,null==e?n.path:e)}},n.exports),n.exports}function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var componentEmitter=createCommonjsModule((function(t){function e(t){if(t)return function(t){for(var n in e.prototype)t[n]=e.prototype[n];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,o=this._callbacks["$"+t];if(!o)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<o.length;i++)if((n=o[i])===e||n.fn===e){o.splice(i,1);break}return 0===o.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],o=1;o<arguments.length;o++)e[o-1]=arguments[o];if(n){o=0;for(var i=(n=n.slice(0)).length;o<i;++o)n[o].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}}));class SocketClient extends componentEmitter{constructor(t){super(),this._socketMock=t,this._emitFn=componentEmitter.prototype.emit,this.connected=!0,this.disconnected=!1}emit(t,...e){let n;"function"==typeof e[e.length-1]&&(n=e.pop()),this._socketMock.emitEvent(t,e,n)}fireEvent(t,e){this._emitFn(t,e)}close(){return this.disconnected=!0,this.connected=!1,this.emit("disconnect","io client disconnect"),this}disconnect(){return this.close()}}const createPayload=function(t){return t?JSON.parse(JSON.stringify(t)):[t][0]};class SocketMock extends componentEmitter{constructor(){super(),this.joinedRooms=this.rooms=[],this.socketClient=new SocketClient(this),this._emitFn=componentEmitter.prototype.emit,this.generalCallbacks={},this.broadcast={to:t=>({emit:(e,n)=>{this.generalCallbacks[e]&&this.generalCallbacks[e](createPayload(n),t)}})}}emitEvent(t,e,n){this._emitFn(t,...e.map(createPayload),n)}onEmit(t,e){this.generalCallbacks[t]=e}emit(t,e){this.socketClient.fireEvent(t,e)}join(t){this.joinedRooms.push(t)}leave(t){const e=this.joinedRooms.indexOf(t);this.joinedRooms.splice(e,1)}monitor(t){return t}disconnect(){return this.emit("disconnecting","io server disconnect"),this.emit("disconnect","io server disconnect"),this}}(({})).exports=SocketMock;
 //# sourceMappingURL=index.min.js.map